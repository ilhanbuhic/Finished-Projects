let crypto,fs,path;_e0a‍.x([["generateAESKey",()=>generateAESKey],["encryptWithAES",()=>encryptWithAES],["decryptWithAES",()=>decryptWithAES]]);_e0a‍.w("crypto",[["default",["crypto"],function(v){crypto=v}]]);_e0a‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_e0a‍.w("path",[["default",["path"],function(v){path=v}]]);



       function generateAESKey() {
  return crypto.randomBytes(32).toString('base64')
}

       function encryptWithAES(data, key) {
    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipheriv("aes-256-cbc", Buffer.from(key, "base64"), iv);

    let encryptedData = cipher.update(data, "utf8", "base64");
    encryptedData += cipher.final("base64");

    // Concatenate IV and encrypted data for later decryption
    return iv.toString("base64") + ":" + encryptedData;
}
const name = 'Ena Bejtic'
const key = '19aZuJ1FpFays0nC1y6XYzQLDPcwSEEceJ7GwOJRbws='
// console.log(encryptWithAES(name, key))

const encryptedData = '/UdESPKbJnO4M4iy1qrTbw==:MjoBdwwDLD1UflIONk/V8g=='
       function decryptWithAES(encryptedData, key) {
    const [ivString, encryptedDataString] = encryptedData.split(":");
    const iv = Buffer.from(ivString, "base64");
    const cipher = crypto.createDecipheriv("aes-256-cbc", Buffer.from(key, "base64"), iv);

    let decryptedData = cipher.update(encryptedDataString, "base64", "utf8");
    decryptedData += cipher.final("utf8");

    return decryptedData;
}
_e0a‍.g.console.log(decryptWithAES(encryptedData, key))